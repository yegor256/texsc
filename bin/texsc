#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright (c) 2020 Yegor Bugayenko
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the 'Software'), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

VERSION = '0.2.0'

STDOUT.sync = true

require 'backtrace'
require 'loog'
require 'open3'
require 'slop'

begin
  log = Loog::REGULAR
  begin
    opts = Slop.parse(ARGV, strict: true, help: true) do |o|
      o.banner = "Usage (#{VERSION}): texsc [options] files
Options are:"
      o.string '--pws', 'The location of aspell.en.pws file'
      o.array '--ignore', 'The name of the command or environment to ignore'
      o.integer '--min-word-length',
        'The minimum length of the word to be checked', default: 3
      o.bool '--version', 'Print current version' do
        puts VERSION
        exit
      end
      o.bool '--verbose', 'Make it more verbose than usual' do
        log = Loog::VERBOSE
      end
      o.bool '--help', 'Read this: https://github.com/yegor256/texsc' do
        puts o
        exit
      end
    end
  rescue Slop::Error => ex
    raise ex.message
  end
  raise 'Try --help' if opts.arguments.empty?
  if opts[:pws]
    log.debug("PWS with an additional dictionary is here: #{opts[:pws]}")
    opts[:pws] = File.expand_path(opts[:pws])
    log.debug("The real path of PWS is: #{opts[:pws]}")
  end
  errors = 0
  files = 0
  opts.arguments.each do |f|
    tex = File.read(f)
    opts[:ignore].each do |e|
      tex = tex.gsub(/\\begin{#{e}}.+\\end{#{e}}/m, '')
    end
    log.info("Checking #{f} (#{tex.length} chars)...")
    cmd = [
      'aspell',
      "--ignore=#{opts['min-word-length']}",
      '--dont-tex-check-comments',
      '--lang=en',
      '--mode=tex',
      opts[:pws] ? "-p #{opts[:pws]}" : '',
      opts[:ignore].map { |e| "--add-tex-command '#{e} pppppooooo'" }.join(' '),
      'pipe'
    ].join(' ')
    log.debug(cmd)
    Open3.popen3(cmd) do |stdin, stdout, stderr, thread|
      stdin.print(tex)
      stdin.close
      status = thread.value.to_i
      unless status.zero?
        log.error(stderr.read)
        raise "Failed to run aspell, exit code is #{status}"
      end
      stdout.read.split("\n").select { |t| t.start_with?('&') }.each do |t|
        log.info(t)
        errors += 1
      end
    end
    files += 1
  end
  unless errors.zero?
    log.info("#{errors} spelling errors found in #{files} file(s)")
    exit 1
  end
  log.info("No spelling errors found in #{files} file(s), the text is clean")
rescue StandardError => ex
  if opts[:verbose]
    puts Backtrace.new(ex).to_s
  else
    puts "ERROR: #{ex.message}"
  end
  exit(255)
end
